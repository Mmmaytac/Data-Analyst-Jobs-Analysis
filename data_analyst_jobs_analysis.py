# -*- coding: utf-8 -*-
"""Data_Analyst_Jobs_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wS44ToQTRWbCPYZmrNglW_UKyT0T2XOw

# ***Importing libraries***
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('DataAnalyst.csv')
df

"""#Number of rows and columns"""

df.shape

"""#Number of first 10 rows"""

df.head(10)

"""#Displaying data types of each column

"""

df.dtypes

"""#information of the data

"""

df.info()

"""#Looking at the missing values"""

df.isnull().sum()

"""## ***Data Cleaning***"""

df.replace(-1,np.nan,inplace=True)
df.replace("-1",np.nan,inplace=True)
df.replace(-1.0,np.nan,inplace=True)

df['Job Title'].value_counts()[:20]

df["Job Title"]=df["Job Title"].str.replace("Sr. Data Analyst","Senior Data Analyst")
df["Job Title"]=df["Job Title"].str.replace("Sr Data Analyst","Senior Data Analyst")
df["Job Title"]=df["Job Title"].str.replace("Data Analyst Senior","Senior Data Analyst")
df["Job Title"]=df["Job Title"].str.replace("Data Analyst Junior","Junior Data Analyst")
df["Job Title"]=df["Job Title"].str.replace("Jr. Data Analyst","Junior Data Analyst")
df["Job Title"]=df["Job Title"].str.replace("Jr Data Analyst","Junior Data Analyst")

df["Company Name"]=df["Company Name"].str.split('\n').str[0]

df

"""#Dealing with missing value in the Salary Estimate"""

df['Salary Estimate'].isnull().sum()

df['Salary Estimate'].drop(df[df['Salary Estimate'].isnull()]["Unnamed: 0"],inplace=True)

"""#Creating new columns"""

df["Min_salary"]=df['Salary Estimate'].str.lstrip("$").str[:3].str.replace("K","").str.strip().astype("float")

df["Max_salary"]=df['Salary Estimate'].str[6:10].str.replace("K","").str.lstrip("$").str.strip().astype("float")

df["Avg_salary"]=(df['Max_salary']+df['Min_salary'])/2

df["Python_job"]=df['Job Description'].str.contains("Python", na=False, case=False)

df["Sql_job"]=df['Job Description'].str.contains("sql", na=False, case=False)

df["Excel_job"]=df['Job Description'].str.contains("excel", na=False, case=False)

df["Tableau_job"]=df['Job Description'].str.contains("tableau", na=False, case=False)

"""#Data vizualization"""

df_analyst= df[['Job Title', 'Company Name', 'Rating', 'Industry', 'Sector', 'Min_salary','Max_salary', 'Avg_salary','Python_job', 'Sql_job', 'Excel_job', 'Tableau_job']]
df_analyst.head()

"""#Salary Distribution for Analysts"""

sns.boxplot([df_analyst['Avg_salary'],df_analyst['Max_salary'],df_analyst['Min_salary']],palette=["#27391C","#1F7D53","#255F38"])
plt.title("Salary Distribution for Analysts")
plt.xlabel("Salary Categories")
plt.ylabel("Salary Amount")
plt.show()

"""#Max_salary and rating by Jobs"""

sns.scatterplot(df_analyst,x=df['Job Title'].sample(30),y=df['Max_salary'],hue=df['Rating'])
plt.title("Max_salary and rating by Jobs")
plt.xlabel("Job Title")
plt.ylabel("Max_salary")
plt.xticks(rotation=90)
plt.show()

"""#Avarage of rating by Industry"""

new_dta=df_analyst.groupby("Industry").agg({"Rating":"mean"}).reset_index()
sns.barplot(new_dta,x=new_dta['Industry'].sample(20),y=new_dta.Rating,hue="Rating",palette="viridis")
plt.title("Avarage of rating by Industry")
plt.xlabel("Industry")
plt.ylabel("Avarage of Rating")
plt.xticks(rotation=90)
plt.show()

"""#Number of Companies Founded by Year"""

plt.figure(figsize=(10, 8))
sns.lineplot(df[["Company Name",'Founded']].groupby('Founded')["Company Name"].count(),color='green')
plt.xlabel("Established")
plt.ylabel('Number of company')
plt.title('Number of Companies Founded by Year')
plt.show()